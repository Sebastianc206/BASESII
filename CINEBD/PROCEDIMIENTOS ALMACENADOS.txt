--PROCEDIMIENTO CREAR PELICULA
CREATE OR ALTER PROCEDURE sp_CrearPelicula 
    @nombre VARCHAR(100), 
    @clasificacion VARCHAR(10), 
    @duracion INT, 
    @descripcion NVARCHAR(MAX),
    @mensajeError NVARCHAR(MAX) OUTPUT
AS
BEGIN
    SET NOCOUNT ON

    BEGIN TRY
        BEGIN TRAN

        -- Verificar que la duración sea válida
        IF @duracion <= 0
        BEGIN
            SET @mensajeError = 'ERROR: La película no cuenta con una duración correcta, debe ser mayor que 0';
            ROLLBACK TRAN
            RETURN
        END

        -- Verificar que la película no esté ya registrada
        IF EXISTS (SELECT 1 FROM Pelicula WHERE Nombre = @nombre OR Clasificacion = @clasificacion OR Descripcion = @descripcion)
        BEGIN
            SET @mensajeError = 'ERROR: La película ya existe en el sistema';
            ROLLBACK TRAN
            RETURN
        END

        -- Insertar la película si no existe
        INSERT INTO Pelicula (Nombre, Clasificacion, Duracion, Descripcion)
        VALUES (@nombre, @clasificacion, @duracion, @descripcion)

        -- Confirmar la transacción si no hubo errores
        COMMIT TRAN
        SET @mensajeError = 'La operación fue exitosa.'
    END TRY
    BEGIN CATCH
        -- Capturar y mostrar el error
        IF @@TRANCOUNT > 0
            ROLLBACK TRAN

        SET @mensajeError = ERROR_MESSAGE()
    END CATCH
END


go
--PRUEBAS DEL SP:
DECLARE @mensaje NVARCHAR(MAX);
exec sp_CrearPelicula 'Pruebadepeli222', 'Clase B', 100, 'pruebis pruebis', @mensajeError = @mensaje OUTPUT --CON ESTA SI DEJA, SI SE INTENTA EJECUTAR 2 VECES DEBE LANZAR ERROR
print @mensaje
exec sp_CrearPelicula 'Pruebadepeli', 'Clase B', 00, 'pruebis pruebis 2' --ESTA PRUEBA ES PARA VER QUE NO ACEPTE LAS PELICULAS CON DURACION MENOR A 0
select * from pelicula

go

CREATE OR ALTER PROCEDURE VerificaUsuario
    @Nombre VARCHAR(50),
    @Contraseña VARCHAR(255),
    @Rol VARCHAR(50) OUTPUT,  -- Parámetro de salida para devolver el rol
    @mensajeError NVARCHAR(MAX) OUTPUT
AS
BEGIN
    SET NOCOUNT ON

    BEGIN TRY
        BEGIN TRAN

        DECLARE @ContraDsc VARBINARY(64);
        SET @ContraDsc = HASHBYTES('SHA2_256', @Contraseña)

        -- Verificar si el usuario existe
        IF NOT EXISTS (SELECT 1 FROM Usuarios WHERE Nombre = @Nombre)
        BEGIN
            SET @mensajeError = 'ERROR: El usuario no existe en el sistema'
            ROLLBACK TRAN
            RETURN
        END

        -- Verificar si la contraseña es correcta
        IF NOT EXISTS (SELECT 1 FROM Usuarios WHERE Nombre = @Nombre AND Contraseña = @ContraDsc)
        BEGIN
            SET @mensajeError = 'ERROR: Contraseña incorrecta'
            ROLLBACK TRAN
            RETURN
        END

        -- Obtener el rol del usuario
        SELECT @Rol = Rol FROM Usuarios WHERE Nombre = @Nombre

        -- Confirmar la transacción si no hubo errores
        COMMIT TRAN
        SET @mensajeError = 'Usuario y contraseña correctos'
    END TRY
    BEGIN CATCH
        -- Capturar y mostrar el error
        IF @@TRANCOUNT > 0
            ROLLBACK TRAN

        SET @mensajeError = ERROR_MESSAGE()
        SET @Rol = NULL
    END CATCH
END

DECLARE @RolPrueba VARCHAR(50);
DECLARE @MensajeErrorPrueba NVARCHAR(MAX);
EXEC VerificaUsuario
    @Nombre = 'admin',
    @Contraseña = 'admin123',
    @Rol = @RolPrueba OUTPUT,
    @mensajeError = @MensajeErrorPrueba OUTPUT;

print @RolPrueba
print @MensajeErrorPrueba

go

select * from Usuarios

go
select * from Log_Transaccion
select * from Transaccion
select * from Pelicula
select * from Sesion
go

CREATE OR ALTER PROCEDURE sp_CrearSesion
    @fechaInicio DATETIME2, 
    @idSala INT,
    @idPelicula INT,
    @mensajeError NVARCHAR(MAX) OUTPUT
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        BEGIN TRANSACTION;

        -- Variables
        DECLARE @duracion INT;
        SELECT @duracion = duracion FROM Pelicula WHERE id_pelicula = @idPelicula;

        -- Fecha fin
        DECLARE @fechaFin DATETIME2;
        SET @fechaFin = DATEADD(MINUTE, @duracion, @fechaInicio);

        -- Verificar si la película existe
        IF NOT EXISTS (
            SELECT 1 
            FROM Pelicula 
            WHERE ID_pelicula = @idPelicula
        )
        BEGIN
            SET @mensajeError = 'ERROR: La película NO existe en el sistema';
            ROLLBACK TRANSACTION;
            RETURN;
        END;

        -- Verificar si la sala existe
        IF NOT EXISTS (
            SELECT 1 
            FROM Sala
            WHERE ID_sala = @idSala
        )
        BEGIN
            SET @mensajeError = 'ERROR: La sala NO existe en el sistema';
            ROLLBACK TRANSACTION;
            RETURN;
        END;

        -- Verificar que no se traslapen las sesiones
        IF EXISTS(
            SELECT 1
            FROM Sesion
            WHERE id_sala = @idSala AND Estado = 'Activa'
            AND (
                (@fechaInicio BETWEEN fecha_inicio AND fecha_fin OR @fechaFin BETWEEN fecha_inicio AND fecha_fin)
                OR 
                (fecha_inicio BETWEEN @fechaInicio AND @fechaFin OR fecha_fin BETWEEN @fechaInicio AND @fechaFin)
            )
        )
        BEGIN
            SET @mensajeError = 'ERROR: La sesión se traslapa';
            ROLLBACK TRANSACTION;
            RETURN;
        END;

        -- Verificar que haya un espacio de 15 minutos entre las sesiones
        IF EXISTS(
            SELECT 1
            FROM Sesion
            WHERE id_sala = @idSala AND estado = 'Activa'
            AND (
                ABS(DATEDIFF(MINUTE, fecha_fin, @fechaInicio)) < 15 OR ABS(DATEDIFF(MINUTE, @fechaFin, fecha_inicio)) < 15
            )
        )
        BEGIN
            SET @mensajeError = 'ERROR: Entre sesiones deben haber 15 minutos de por medio para usar la misma sala.';
            ROLLBACK TRANSACTION;
            RETURN;
        END;

        -- Insertar la sesión
        INSERT INTO Sesion (Fecha_Inicio, Fecha_Fin, Estado, ID_Sala, ID_Pelicula)
        VALUES (@fechaInicio, @fechaFin, 'Activa', @idSala, @idPelicula);
    
        -- Confirmar la transacción si no hubo errores
        COMMIT TRANSACTION;
        SET @mensajeError = 'La sesión fue registrada exitosamente.';
    END TRY
    BEGIN CATCH
        -- Capturar y mostrar el error
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;

        SET @mensajeError = ERROR_MESSAGE();
    END CATCH
END;

go
DECLARE @MensajeErrorPrueba NVARCHAR(MAX);

EXEC sp_CrearSesion
    @fechaInicio = '2024-10-10T16:20:00',
    @idSala = 3,
    @idPelicula = 15,
    @mensajeError = @MensajeErrorPrueba OUTPUT;
print @MensajeErrorPrueba